{
	"info": {
		"_postman_id": "4609f3d2-17e3-4e76-a875-8dce93170120",
		"name": "serverest",
		"description": "## Teste para Vaga de QA - Projeto por Vanessa Pinheiro\n\nEste postman contém o resultado da realização de **testes de API** utilizando **Postman**, **Newman** e **GitHub Actions**.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "14182391",
		"_collection_link": "https://cloudy-shadow-228237.postman.co/workspace/VANESSA-TESTE~6839a81d-3df4-4073-aab4-834daa2f2b68/collection/14182391-4609f3d2-17e3-4e76-a875-8dce93170120?action=share&source=collection_link&creator=14182391"
	},
	"item": [
		{
			"name": "login",
			"item": [
				{
					"name": "cadastrar usuario",
					"item": [
						{
							"name": "Cadastrar usuário",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"currentName\", `user_${Date.now()}`);",
											"pm.environment.set(\"currentEmail\", `user_${Date.now()}@example.com`);",
											"pm.environment.set(\"currentPassword\", `teste`);",
											"pm.environment.set(\"currentAdministrador\", Math.random() > 0.5 ? \"true\" : \"false\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"",
											"pm.test(\"Status code é 201\", () => {",
											"    pm.expect(pm.response.code).to.eql(201);",
											"  });",
											"",
											"  pm.test(\"Mensagem é correta\", () => {",
											"    pm.expect(response.message).to.eql(\"Cadastro realizado com sucesso\");",
											"  });",
											"",
											"  pm.test(\"_id presente\", () => {",
											"    pm.expect(response).to.have.property(\"_id\");",
											"  });",
											"",
											"pm.environment.set(\"currentUserId\", response._id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"{{currentName}}\",\n  \"email\": \"{{currentEmail}}\",\n  \"password\": \"{{currentPassword}}\",\n  \"administrador\": \"{{currentAdministrador}}\"\n}\n",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/usuarios",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios"
									]
								},
								"description": "Não é permitido cadastrar usuário com email já utilizado"
							},
							"response": []
						},
						{
							"name": "Tentar criar usuario padrao",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"currentName\", `user_${Date.now()}`);",
											"pm.environment.set(\"currentEmail\", `user_${Date.now()}@example.com`);",
											"pm.environment.set(\"currentPassword\", `teste`);",
											"pm.environment.set(\"currentAdministrador\", Math.random() > 0.5 ? \"true\" : \"false\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"",
											"pm.test(\"Status code é 201\", () => {",
											"    pm.expect(pm.response.code).to.eql(201);",
											"  });",
											"",
											"  pm.test(\"Mensagem é correta\", () => {",
											"    pm.expect(response.message).to.eql(\"Cadastro realizado com sucesso\");",
											"  });",
											"",
											"  pm.test(\"_id presente\", () => {",
											"    pm.expect(response).to.have.property(\"_id\");",
											"  });",
											"",
											"pm.environment.set(\"currentUserId\", response._id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"{{currentName}}\",\n  \"email\": \"{{currentEmail}}\",\n  \"password\": \"{{currentPassword}}\",\n  \"administrador\": \"{{currentAdministrador}}\"\n}\n",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/usuarios",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios"
									]
								},
								"description": "Não é permitido cadastrar usuário com email já utilizado"
							},
							"response": []
						}
					]
				},
				{
					"name": "1. Validar login do usuário.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"pm.test(\"Status code é 200\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"  });",
									"",
									"  pm.test(\"Mensagem é correta\", () => {",
									"    pm.expect(response.message).to.eql(\"Login realizado com sucesso\");",
									"  });",
									"",
									"  pm.test(\"Token de autorização está presente\", () => {",
									"    pm.expect(response).to.have.property(\"authorization\");",
									"    pm.expect(response.authorization).to.match(/^Bearer\\s[\\w-]+\\.[\\w-]+\\.[\\w-]+$/);",
									"  });",
									"",
									"  pm.environment.set(\"currentBearerToken\", response.authorization.split(\" \")[1]); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{currentEmail}}\",\n  \"password\": \"{{currentPassword}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						},
						"description": "A duração do token retornado em authorization é de 600 segundos (10 minutos). Caso esteja expirado irá receber status code 401 (Unauthorized).\n"
					},
					"response": []
				},
				{
					"name": "2. Validar E-mail Inválido ou Senha Incorreta:",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"pm.test(\"Status code é 401\", () => {",
									"    pm.expect(pm.response.code).to.eql(401);",
									"  });",
									"",
									"  pm.test(\"Mensagem de erro está correta\", () => {",
									"    pm.expect(response.message).to.eql(\"Email e/ou senha inválidos\");",
									"  });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{$randomEmail}}\",\n  \"password\": \"{{$randomPassword}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						},
						"description": "A duração do token retornado em authorization é de 600 segundos (10 minutos). Caso esteja expirado irá receber status code 401 (Unauthorized).\n"
					},
					"response": []
				},
				{
					"name": "3.1 Validação de Campos faltando o campo e-mail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"  pm.test(\"Status code é 400\", () => {",
									"    pm.expect(pm.response.code).to.eql(400);",
									"  });",
									"  pm.test(\"Status code é 400 para falta de email\", () => {",
									"      pm.expect(pm.response.code).to.eql(400);",
									"    });",
									"",
									"    pm.test(\"Menssagem de erro por falta de email correta\", () => {",
									"      pm.expect(response.email).to.eql(\"email é obrigatório\");",
									"    });",
									"  ",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						},
						"description": "A duração do token retornado em authorization é de 600 segundos (10 minutos). Caso esteja expirado irá receber status code 401 (Unauthorized).\n"
					},
					"response": []
				},
				{
					"name": "3.2 Validação de Campos faltando o  passwod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"  pm.test(\"Status code é 400\", () => {",
									"    pm.expect(pm.response.code).to.eql(400);",
									"  });",
									"  pm.test(\"Status code é 400 para falta de password\", () => {",
									"      pm.expect(pm.response.code).to.eql(400);",
									"    });",
									"",
									"    pm.test(\"Menssagem de erro por falta de password correta\", () => {",
									"      pm.expect(response.password).to.eql(\"password é obrigatório\");",
									"    });",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{$randomEmail}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						},
						"description": "A duração do token retornado em authorization é de 600 segundos (10 minutos). Caso esteja expirado irá receber status code 401 (Unauthorized).\n"
					},
					"response": []
				},
				{
					"name": "3.3 Validação de Campos, ambos os campos ausentes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"  pm.test(\"Status code é 400\", () => {",
									"    pm.expect(pm.response.code).to.eql(400);",
									"  });",
									"  pm.test(\"Status code é 400 para falta de password\", () => {",
									"      pm.expect(pm.response.code).to.eql(400);",
									"    });",
									"",
									"    pm.test(\"Menssagem de erro por falta de password correta\", () => {",
									"      pm.expect(response.password).to.eql(\"password é obrigatório\");",
									"    });",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{$randomEmail}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						},
						"description": "A duração do token retornado em authorization é de 600 segundos (10 minutos). Caso esteja expirado irá receber status code 401 (Unauthorized).\n"
					},
					"response": []
				}
			]
		},
		{
			"name": "usuarios",
			"item": [
				{
					"name": "listar usuarios",
					"item": [
						{
							"name": "1. Listar usuários cadastrados, sem filtro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"",
											"pm.test(\"Status code é 200\", () => {",
											"    pm.expect(pm.response.code).to.eql(200);",
											"  });",
											"",
											"pm.test(\"quantidade é um número\", () => {    ",
											"    pm.expect(response).to.have.property(\"quantidade\").that.is.a(\"number\");",
											"});",
											"",
											"pm.test(\"usuarios é um array\", () => {",
											"    pm.expect(response).to.have.property(\"usuarios\").that.is.an(\"array\");",
											"});",
											"",
											"pm.test(\"usuarios contém itens válidos\", () => {",
											"    const usuarios = response.usuarios;",
											"",
											"    if (usuarios.length > 0) {",
											"        const usuario = usuarios[0];",
											"        pm.expect(usuario).to.have.property(\"nome\").that.is.a(\"string\");",
											"        pm.expect(usuario).to.have.property(\"email\").that.is.a(\"string\").and.match(/^\\S+@\\S+\\.\\S+$/);",
											"        pm.expect(usuario).to.have.property(\"password\").that.is.a(\"string\");",
											"        pm.expect(usuario).to.have.property(\"administrador\").that.is.a(\"string\");",
											"        pm.expect(usuario).to.have.property(\"_id\").that.is.a(\"string\");",
											"    }",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{currentBearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/usuarios",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios"
									],
									"query": [
										{
											"key": "_id",
											"value": "<string>",
											"disabled": true
										},
										{
											"key": "nome",
											"value": "<string>",
											"disabled": true
										},
										{
											"key": "email",
											"value": "<string>",
											"disabled": true
										},
										{
											"key": "password",
											"value": "<string>",
											"disabled": true
										},
										{
											"key": "administrador",
											"value": "<string>",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Listar usuários cadastrados, com filtro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"",
											"pm.test(\"Status code é 200\", () => {",
											"    pm.expect(pm.response.code).to.eql(200);",
											"  });",
											"",
											"pm.test(\"quantidade é um número\", () => {    ",
											"    pm.expect(response).to.have.property(\"quantidade\").that.is.a(\"number\");",
											"});",
											"",
											"pm.test(\"usuarios é um array\", () => {",
											"    pm.expect(response).to.have.property(\"usuarios\").that.is.an(\"array\");",
											"});",
											"",
											"pm.test(\"usuarios contém um item\", () => {",
											"    const usuarios = response.usuarios;",
											"    const usuario = usuarios.at(0);",
											"    ",
											"    pm.expect(usuario).to.have.property(\"nome\").that.is.a(\"string\");",
											"    pm.expect(usuario).to.have.property(\"email\").that.is.a(\"string\").and.match(/^\\S+@\\S+\\.\\S+$/);",
											"    pm.expect(usuario).to.have.property(\"password\").that.is.a(\"string\");",
											"    pm.expect(usuario).to.have.property(\"administrador\").that.is.a(\"string\");",
											"    pm.expect(usuario).to.have.property(\"_id\").that.is.a(\"string\");",
											"});",
											"",
											"pm.test(\"Query params são iguais ao primeiro usuário na resposta\", () => {",
											"    const queryParams = {",
											"        _id: pm.request.url.query.get(\"_id\"),",
											"        nome: pm.request.url.query.get(\"nome\"),",
											"        email: pm.request.url.query.get(\"email\"),",
											"        password: pm.request.url.query.get(\"password\"),",
											"        administrador: pm.request.url.query.get(\"administrador\"),",
											"    };",
											"",
											"    const firstUser = response.usuarios[0];",
											"",
											"    pm.expect(queryParams._id).to.be.eql(firstUser._id);",
											"    pm.expect(queryParams.nome).to.be.eql(firstUser.nome);",
											"    pm.expect(queryParams.email).to.be.eql(firstUser.email);",
											"    pm.expect(queryParams.password).to.be.eql(firstUser.password);",
											"    pm.expect(queryParams.administrador).to.be.eql(firstUser.administrador);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{currentBearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/usuarios?_id={{currentUserId}}&nome={{currentName}}&email={{currentEmail}}&password={{currentPassword}}&administrador={{currentAdministrador}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios"
									],
									"query": [
										{
											"key": "_id",
											"value": "{{currentUserId}}"
										},
										{
											"key": "nome",
											"value": "{{currentName}}"
										},
										{
											"key": "email",
											"value": "{{currentEmail}}"
										},
										{
											"key": "password",
											"value": "{{currentPassword}}"
										},
										{
											"key": "administrador",
											"value": "{{currentAdministrador}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Consultar usuários passando filtros inválidos",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"",
											"pm.test(\"Status code é 400\", () => {",
											"    pm.expect(pm.response.code).to.eql(400);",
											"  });",
											"",
											"pm.test(\"Email invalido\", () => {    ",
											"    pm.expect(response).to.have.property(\"email\").that.is.eql(\"email deve ser um email válido\");",
											"});",
											"",
											"pm.test(\"Administrador invalido\", () => {    ",
											"    pm.expect(response).to.have.property(\"administrador\").that.is.eql(\"administrador deve ser 'true' ou 'false'\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{currentBearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/usuarios?_id={{currentUserId}}&nome={{currentName}}&email=invalid&password={{currentPassword}}&administrador=invalid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios"
									],
									"query": [
										{
											"key": "_id",
											"value": "{{currentUserId}}"
										},
										{
											"key": "nome",
											"value": "{{currentName}}"
										},
										{
											"key": "email",
											"value": "invalid"
										},
										{
											"key": "password",
											"value": "{{currentPassword}}"
										},
										{
											"key": "administrador",
											"value": "invalid"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "4. Verificar usuarios não encontrados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"",
											"pm.test(\"Status code é 200\", () => {",
											"    pm.expect(pm.response.code).to.eql(200);",
											"  });",
											"",
											"pm.test(\"quantidade é igual 0\", () => {    ",
											"    pm.expect(response).to.have.property(\"quantidade\").to.be.eql(0)",
											"});",
											"",
											"pm.test(\"usuarios é um array vazio\", () => {",
											"    pm.expect(response).to.have.property(\"usuarios\").that.is.an(\"array\");",
											"",
											"    pm.expect(response.usuarios).to.have.lengthOf(0);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{currentBearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/usuarios?_id=invalid&nome={{currentName}}&email={{currentEmail}}&password={{currentPassword}}&administrador={{currentAdministrador}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios"
									],
									"query": [
										{
											"key": "_id",
											"value": "invalid"
										},
										{
											"key": "nome",
											"value": "{{currentName}}"
										},
										{
											"key": "email",
											"value": "{{currentEmail}}"
										},
										{
											"key": "password",
											"value": "{{currentPassword}}"
										},
										{
											"key": "administrador",
											"value": "{{currentAdministrador}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "cadastro",
					"item": [
						{
							"name": "1. Validar cadastro  de usuário",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"",
											"pm.test(\"Status code é 201\", () => {",
											"    pm.expect(pm.response.code).to.eql(201);",
											"  });",
											"",
											"  pm.test(\"Mensagem é correta\", () => {",
											"    pm.expect(response.message).to.eql(\"Cadastro realizado com sucesso\");",
											"  });",
											"",
											"  pm.test(\"_id presente\", () => {",
											"    pm.expect(response).to.have.property(\"_id\");",
											"  });",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"{{$randomFullName}}\",\n  \"email\": \"{{$timestamp}}_{{$randomEmail}}\",\n  \"password\": \"{{$randomPassword}}\",\n  \"administrador\": \"{{$randomBoolean}}\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/usuarios",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios"
									]
								},
								"description": "Não é permitido cadastrar usuário com email já utilizado"
							},
							"response": []
						},
						{
							"name": "2. Validar cadastrar com  e-mail ja utilizado",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"",
											"if(pm.response.code === 400){",
											"    pm.test(\"Status code é 400\", () => {",
											"    pm.expect(pm.response.code).to.eql(400);",
											"  });",
											"",
											"  pm.test(\"Mensagem é correta\", () => {",
											"    pm.expect(response.message).to.eql(\"Este email já está sendo usado\");",
											"  });",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"{{currentName}}\",\n  \"email\": \"{{currentEmail}}\",\n  \"password\": \"{{currentPassword}}\",\n  \"administrador\": \"{{currentAdministrador}}\"\n}\n",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/usuarios",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios"
									]
								},
								"description": "Não é permitido cadastrar usuário com email já utilizado"
							},
							"response": []
						},
						{
							"name": "3. Testes de Validação de Campos",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"",
											"pm.test(\"Status code é 400\", () => {",
											"    pm.expect(pm.response.code).to.eql(400);",
											"  });",
											"",
											"pm.test(\"nome é obrigatório\", () => {    ",
											"    pm.expect(response).to.have.property(\"nome\", \"nome é obrigatório\");",
											"});",
											"",
											"pm.test(\"email é obrigatório\", () => {",
											"    pm.expect(response).to.have.property(\"email\", \"email é obrigatório\");",
											"});",
											"",
											"pm.test(\"password é obrigatório\", () => {",
											"    pm.expect(response).to.have.property(\"password\", \"password é obrigatório\");",
											"});",
											"",
											"pm.test(\"administrador é obrigatório\", () => {",
											"    pm.expect(response).to.have.property(\"administrador\", \"administrador é obrigatório\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/usuarios",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios"
									]
								},
								"description": "Não é permitido cadastrar usuário com email já utilizado"
							},
							"response": []
						},
						{
							"name": "4. Propridade email invalido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"",
											"pm.test(\"Status code é 400\", () => {",
											"    pm.expect(pm.response.code).to.eql(400);",
											"  });",
											"",
											"pm.test(\"email invalido\", () => {    ",
											"    pm.expect(response).to.have.property(\"email\", \"email deve ser um email válido\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"{{$randomFullName}}\",\n  \"email\": \"invalid\",\n  \"password\": \"{{$randomPassword}}}}\",\n  \"administrador\": \"{{$randomBoolean}}\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/usuarios",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios"
									]
								},
								"description": "Não é permitido cadastrar usuário com email já utilizado"
							},
							"response": []
						},
						{
							"name": "5. Propriedade administrador invalida",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"",
											"pm.test(\"Status code é 400\", () => {",
											"    pm.expect(pm.response.code).to.eql(400);",
											"  });",
											"",
											"pm.test(\"adminstrador invalido\", () => {    ",
											"    pm.expect(response).to.have.property(\"administrador\", \"administrador deve ser 'true' ou 'false'\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"{{$randomFullName}}\",\n  \"email\": \"{{$randomEmail}}\",\n  \"password\": \"{{$randomPassword}}}}\",\n  \"administrador\": \"invalid\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/usuarios",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios"
									]
								},
								"description": "Não é permitido cadastrar usuário com email já utilizado"
							},
							"response": []
						}
					]
				},
				{
					"name": "{_id}",
					"item": [
						{
							"name": "buscar por id",
							"item": [
								{
									"name": "1. Buscar usuário por ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Status code é 200\", () => {",
													"    pm.expect(pm.response.code).to.eql(200);",
													"});",
													"",
													"pm.test(\"propriedades validas\", () => {",
													"    const usuario = response;",
													"",
													"    pm.expect(usuario).to.have.property(\"nome\").that.is.a(\"string\");",
													"    pm.expect(usuario).to.have.property(\"email\").that.is.a(\"string\").and.match(/^\\S+@\\S+\\.\\S+$/);",
													"    pm.expect(usuario).to.have.property(\"password\").that.is.a(\"string\");",
													"    pm.expect(usuario).to.have.property(\"administrador\").that.is.a(\"string\");",
													"    pm.expect(usuario).to.have.property(\"_id\").that.is.a(\"string\");",
													"});",
													"",
													"pm.test(\"_id da url deve ser igual _id da resposta\", () => {",
													"    const urlId = pm.request.url.toString().split(\"/\").at(-1);",
													"    pm.expect(response._id).to.eql(urlId);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentBearerToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/usuarios/:_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"usuarios",
												":_id"
											],
											"variable": [
												{
													"key": "_id",
													"value": "{{currentUserId}}",
													"description": "(Required) ID do usuário"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "2. Usuario não encontrado",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Status code é 200\", () => {",
													"    pm.expect(pm.response.code).to.eql(400);",
													"});",
													"",
													"pm.test(\"Mensagem usuário não encontrado\", () => {",
													"    pm.expect(response).property(\"message\", \"Usuário não encontrado\")",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentBearerToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/usuarios/:_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"usuarios",
												":_id"
											],
											"variable": [
												{
													"key": "_id",
													"value": "invalid"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Editar por id",
							"item": [
								{
									"name": "3. Editar usuário com sucesso",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"currentName\", `user_${Date.now()}`);",
													"pm.environment.set(\"currentEmail\", `user_${Date.now()}@example.com`);",
													"pm.environment.set(\"currentPassword\", `teste`);",
													"pm.environment.set(\"currentAdministrador\", Math.random() > 0.5 ? \"true\" : \"false\");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Status code é 200\", () => {",
													"    pm.expect(pm.response.code).to.eql(200);",
													"  });",
													"",
													"  pm.test(\"Mensagem é correta\", () => {",
													"    pm.expect(response.message).to.eql(\"Registro alterado com sucesso\");",
													"  });"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentBearerToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"nome\": \"{{currentName}}\",\n  \"email\": \"{{currentEmail}}\",\n  \"password\": \"{{currentPassword}}\",\n  \"administrador\": \"{{currentAdministrador}}\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/usuarios/:_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"usuarios",
												":_id"
											],
											"variable": [
												{
													"key": "_id",
													"value": "{{currentUserId}}",
													"description": "(Required) ID do usuário"
												}
											]
										},
										"description": "Não é permitido cadastrar usuário com email já utilizado.\nCaso não seja encontrado usuário com o ID informado é realizado novo cadastro ao invés de alteração.\n"
									},
									"response": []
								},
								{
									"name": "4. Parametros invalidos",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Status code é 400\", () => {",
													"    pm.expect(pm.response.code).to.eql(400);",
													"  });",
													"    ",
													"  pm.test(\"Email invalido\", () => {",
													"    pm.expect(response.email).to.eql(\"email deve ser um email válido\");",
													"  });",
													"",
													"  pm.test(\"Administrador invalido\", () => {",
													"    pm.expect(response.administrador).to.eql(\"administrador deve ser 'true' ou 'false'\");",
													"  });"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentBearerToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"nome\": \"{{currentName}}\",\n  \"email\": \"invalid\",\n  \"password\": \"{{currentPassword}}\",\n  \"administrador\": \"invalid\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/usuarios/:_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"usuarios",
												":_id"
											],
											"variable": [
												{
													"key": "_id",
													"value": "{{currentUserId}}",
													"description": "(Required) ID do usuário"
												}
											]
										},
										"description": "Não é permitido cadastrar usuário com email já utilizado.\nCaso não seja encontrado usuário com o ID informado é realizado novo cadastro ao invés de alteração.\n"
									},
									"response": []
								},
								{
									"name": "5. Parametros obrigatorios",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Status code é 400\", () => {",
													"    pm.expect(pm.response.code).to.eql(400);",
													"  });",
													"",
													"  pm.test(\"Nome obrigatório\", () => {",
													"    pm.expect(response.nome).to.eql(\"nome é obrigatório\");",
													"  });",
													"",
													"  pm.test(\"Password obrigatório\", () => {",
													"    pm.expect(response.password).to.eql(\"password é obrigatório\");",
													"  });",
													"",
													"  pm.test(\"Email obrigatório\", () => {",
													"    pm.expect(response.email).to.eql(\"email é obrigatório\");",
													"  });",
													"",
													"  pm.test(\"Administrador obrigatório\", () => {",
													"    pm.expect(response.administrador).to.eql(\"administrador é obrigatório\");",
													"  });"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentBearerToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/usuarios/:_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"usuarios",
												":_id"
											],
											"variable": [
												{
													"key": "_id",
													"value": "{{currentUserId}}",
													"description": "(Required) ID do usuário"
												}
											]
										},
										"description": "Não é permitido cadastrar usuário com email já utilizado.\nCaso não seja encontrado usuário com o ID informado é realizado novo cadastro ao invés de alteração.\n"
									},
									"response": []
								}
							]
						},
						{
							"name": "Excluir por id",
							"item": [
								{
									"name": "6. Usuario não encontrado",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Status code é 200\", () => {",
													"    pm.expect(pm.response.code).to.eql(200);",
													"  });",
													"",
													"  pm.test(\"Mensagem é correta\", () => {",
													"    pm.expect(response.message).to.eql(\"Nenhum registro excluído\");",
													"  });"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentBearerToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/usuarios/:_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"usuarios",
												":_id"
											],
											"variable": [
												{
													"key": "_id",
													"value": "invalid",
													"description": "(Required) ID do usuário"
												}
											]
										},
										"description": "Não é permitido excluir usuário com carrinho."
									},
									"response": []
								},
								{
									"name": "7. Excluir usuario com sucesso",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Status code é 200\", () => {",
													"    pm.expect(pm.response.code).to.eql(200);",
													"  });",
													"",
													"  pm.test(\"Mensagem é correta\", () => {",
													"    pm.expect(response.message).to.eql(\"Registro excluído com sucesso\");",
													"  });"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentBearerToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/usuarios/:_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"usuarios",
												":_id"
											],
											"variable": [
												{
													"key": "_id",
													"value": "{{currentUserId}}",
													"description": "(Required) ID do usuário"
												}
											]
										},
										"description": "Não é permitido excluir usuário com carrinho."
									},
									"response": []
								}
							]
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://serverest.dev"
		},
		{
			"key": "currentEmail",
			"value": "teste001@teste.com",
			"type": "string"
		},
		{
			"key": "currentPassword",
			"value": "teste",
			"type": "string"
		},
		{
			"key": "currentUserId",
			"value": "hdmWpnhay7Cv1mcm",
			"type": "string"
		},
		{
			"key": "currentName",
			"value": "teste001",
			"type": "string"
		},
		{
			"key": "currentAdministrador",
			"value": "true",
			"type": "string"
		},
		{
			"key": "currentBearerToken",
			"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InRlc3RlMDAxQHRlc3RlLmNvbSIsInBhc3N3b3JkIjoidGVzdGUiLCJpYXQiOjE3MzY2NTIxOTcsImV4cCI6MTczNjY1Mjc5N30.36Qi75Q2vznIlTK1LDq7OHggTNGv5dhBiSPyPlkf5p8",
			"type": "string"
		}
	]
}